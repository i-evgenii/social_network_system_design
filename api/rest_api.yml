openapi: 3.0.3
info:
  title: Social network for travelers
  description: |-
    API for a social network for travelers
  contact:
    email: 735007@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://snft.net/api/v3
tags:
  - name: posts
    description: Everything about your posts
  - name: comments
    description: Everything about your comments
  - name: user
    description: User
paths:
  /posts:
    put:
      tags:
        - posts
      summary: Update an existing posts
      description: Update an existing posts by Id
      operationId: updateposts
      requestBody:
        description: Update an existent posts in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/posts'
          application/xml:
            schema:
              $ref: '#/components/schemas/posts'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/posts'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/posts'          
            application/xml:
              schema:
                $ref: '#/components/schemas/posts'
        '400':
          description: Invalid ID supplied
        '404':
          description: posts not found
        '422':
          description: Validation exception
      security:
        - postsstore_auth:
            - write:postss
            - read:postss
    post:
      tags:
        - posts
      summary: Add a new posts to the store
      description: Add a new posts to the store
      operationId: addposts
      requestBody:
        description: Create a new posts in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/posts'
          application/xml:
            schema:
              $ref: '#/components/schemas/posts'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/posts'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/posts'          
            application/xml:
              schema:
                $ref: '#/components/schemas/posts'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - postsstore_auth:
            - write:postss
            - read:postss
  /posts/findByStatus:
    get:
      tags:
        - posts
      summary: Finds postss by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findpostssByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/posts'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/posts'
        '400':
          description: Invalid status value
      security:
        - postsstore_auth:
            - write:postss
            - read:postss
  /posts/findByTags:
    get:
      tags:
        - posts
      summary: Finds postss by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findpostssByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/posts'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/posts'
        '400':
          description: Invalid tag value
      security:
        - postsstore_auth:
            - write:postss
            - read:postss
  /posts/{postsId}:
    get:
      tags:
        - posts
      summary: Find posts by ID
      description: Returns a single posts
      operationId: getpostsById
      parameters:
        - name: postsId
          in: path
          description: ID of posts to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/posts'          
            application/xml:
              schema:
                $ref: '#/components/schemas/posts'
        '400':
          description: Invalid ID supplied
        '404':
          description: posts not found
      security:
        - api_key: []
        - postsstore_auth:
            - write:postss
            - read:postss
    post:
      tags:
        - posts
      summary: Updates a posts in the store with form data
      description: ''
      operationId: updatepostsWithForm
      parameters:
        - name: postsId
          in: path
          description: ID of posts that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of posts that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of posts that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
      security:
        - postsstore_auth:
            - write:postss
            - read:postss
    delete:
      tags:
        - posts
      summary: Deletes a posts
      description: delete a posts
      operationId: deleteposts
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: postsId
          in: path
          description: posts id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid posts value
      security:
        - postsstore_auth:
            - write:postss
            - read:postss
  /posts/{postsId}/uploadImage:
    post:
      tags:
        - posts
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: postsId
          in: path
          description: ID of posts to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - postsstore_auth:
            - write:postss
            - read:postss
  /comments:
    put:
      tags:
        - comments
      summary: Update an existing comments
      description: Update an existing comments by Id
      operationId: updatecomments
      requestBody:
        description: Update an existent comments in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comments'
          application/xml:
            schema:
              $ref: '#/components/schemas/comments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/comments'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comments'          
            application/xml:
              schema:
                $ref: '#/components/schemas/comments'
        '400':
          description: Invalid ID supplied
        '404':
          description: comments not found
        '422':
          description: Validation exception
      security:
        - commentsstore_auth:
            - write:commentss
            - read:commentss
    post:
      tags:
        - comments
      summary: Add a new comments to the store
      description: Add a new comments to the store
      operationId: addcomments
      requestBody:
        description: Create a new comments in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comments'
          application/xml:
            schema:
              $ref: '#/components/schemas/comments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/comments'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comments'          
            application/xml:
              schema:
                $ref: '#/components/schemas/comments'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - commentsstore_auth:
            - write:commentss
            - read:commentss
  /comments/findByStatus:
    get:
      tags:
        - comments
      summary: Finds commentss by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findcommentssByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comments'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comments'
        '400':
          description: Invalid status value
      security:
        - commentsstore_auth:
            - write:commentss
            - read:commentss
  /comments/findByTags:
    get:
      tags:
        - comments
      summary: Finds commentss by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findcommentssByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comments'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comments'
        '400':
          description: Invalid tag value
      security:
        - commentsstore_auth:
            - write:commentss
            - read:commentss
  /comments/{commentsId}:
    get:
      tags:
        - comments
      summary: Find comments by ID
      description: Returns a single comments
      operationId: getcommentsById
      parameters:
        - name: commentsId
          in: path
          description: ID of comments to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comments'          
            application/xml:
              schema:
                $ref: '#/components/schemas/comments'
        '400':
          description: Invalid ID supplied
        '404':
          description: comments not found
      security:
        - api_key: []
        - commentsstore_auth:
            - write:commentss
            - read:commentss
    post:
      tags:
        - comments
      summary: Updates a comments in the store with form data
      description: ''
      operationId: updatecommentsWithForm
      parameters:
        - name: commentsId
          in: path
          description: ID of comments that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of comments that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of comments that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
      security:
        - commentsstore_auth:
            - write:commentss
            - read:commentss
    delete:
      tags:
        - comments
      summary: Deletes a comments
      description: delete a comments
      operationId: deletecomments
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: commentsId
          in: path
          description: comments id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid comments value
      security:
        - commentsstore_auth:
            - write:commentss
            - read:commentss
  /comments/{commentsId}/uploadImage:
    post:
      tags:
        - comments
      summary: uploads an image
      description: ''
      operationId: uploadFile2
      parameters:
        - name: commentsId
          in: path
          description: ID of comments to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - commentsstore_auth:
            - write:commentss
            - read:commentss
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    posts:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: posts status in the store
          enum:
            - available
            - pending
            - sold
    comments:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: posts status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: posts
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    posts:
      description: posts object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/posts'
        application/xml:
          schema:
            $ref: '#/components/schemas/posts'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    postsstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://postsstore3.swagger.io/oauth/authorize
          scopes:
            write:postss: modify postss in your account
            read:postss: read your postss
    commentsstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://postsstore3.swagger.io/oauth/authorize
          scopes:
            write:postss: modify commentss in your account
            read:postss: read your commentss
    api_key:
      type: apiKey
      name: api_key
      in: header